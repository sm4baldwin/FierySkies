import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { RootState, AppThunk } from '../../store'
import { firestore } from '../../firebaseConfig'
import { doc, getDoc, setDoc, onSnapshot, } from "firebase/firestore"
import { inRoom } from '../user/userSlice'

export interface Idatabase {
  data: {
    room: {
      id: string,
      players: Array<{name: string}>,
      viewers: Array<string>
    }
  }
  status: 'idle' | 'pending' | 'succeeded' | 'failed',
}

const initialState: Idatabase = {
  data: {
    room: {
      id: 'default',
      players: [],
      viewers: []
    }
  },
  status: 'idle',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const joinRoom = createAsyncThunk(
  'database/joinRoom',
  async (roomID: string, {dispatch}) => {
    const docRef = doc(firestore, "lobbies", roomID)
    const docSnap = await getDoc(docRef)
    
    if (docSnap.exists()) {
      await setDoc(docRef, {newUser: 'Stephen'}, { merge: true })
    } else {
      // doc.data() will be undefined in this case
      console.log("No such document!")
      await setDoc(docRef, {newUser: 'Stephen Baldwin'})
    }
    dispatch(inRoom(true))
    return roomID
  }
)

export const databaseSlice = createSlice({
  name: 'database',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateRoomPlayers: (state, action: PayloadAction<Array<{name: string}>>) => {
      state.data.room.players = action.payload
    },
    updateRoomViewers: (state, action: PayloadAction<Array<string>>) => {
      state.data.room.viewers = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(joinRoom.pending, (state) => {
        state.status = 'pending'
      })
      .addCase(joinRoom.fulfilled, (state, action: PayloadAction<string>) => {
        state.status = 'succeeded'
        state.data.room.id = action.payload
      })
  },
})

export const { updateRoomPlayers, updateRoomViewers } = databaseSlice.actions

export const selectRoomInfo = (state: RootState) => state.database.data.room
export const selectRoomMemberCount = (state: RootState) => state.database.data.room.players.length + state.database.data.room.viewers.length

export default databaseSlice.reducer

export const startRoomListener = (): AppThunk => (dispatch, getState) => {
  const { database } = getState()
  const roomID = database.data.room.id

  const unsubscribe = onSnapshot(doc(firestore, "lobbies", roomID), (doc) => {
    const roomData = doc.data()
    if (roomData) {
      console.log(roomData.members)
      dispatch(updateRoomPlayers(roomData.members.players))
      dispatch(updateRoomViewers(roomData.members.viewers))
    }
  })

  return unsubscribe
};
  